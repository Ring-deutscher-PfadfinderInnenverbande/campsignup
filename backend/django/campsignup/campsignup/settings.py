"""
Django settings for campsignup project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&du69m+js4g#pdh7ewcuum!(77%11$=hj+#s6&^9dx6r1u9ct9'
HASHID_FIELD_SALT = 'dfbKJ490io&/&jpf/(T&/(3e908t6%&/2oOPKeuhBÃœQA265'

# Override our "developer key" from above for production
if os.environ.get('DJANGO_SECRET_KEY') is not None:
    SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

if os.environ.get('DJANGO_HASHID_FIELD_SALT') is not None:
    HASHID_FIELD_SALT = os.environ.get('DJANGO_HASHID_FIELD_SALT')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ADMIN_ENABLED = True

# Disable debug mode and admin page in production
if os.environ.get('DJANGO_DEBUG_OFF') is not None:
    DEBUG = False
    ADMIN_ENABLED = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'backend',
    'rest_framework'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'campsignup.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'campsignup.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Allow to override Database connection for production
if os.environ.get('DJANGO_SQL_USR') is not None and \
   os.environ.get('DJANGO_SQL_PW') is not None and \
   os.environ.get('DJANGO_SQL_HOST') is not None and \
   os.environ.get('DJANGO_SQL_PORT') is not None and \
   os.environ.get('DJANGO_SQL_DB') is not None:
    DATABASES['default'] : {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DJANGO_SQL_DB'),
        'USER': os.environ.get('DJANGO_SQL_USR'),
        'PASSWORD': os.environ.get('DJANGO_SQL_PW'),
        'HOST': os.environ.get('DJANGO_SQL_HOST'),
        'PORT':  os.environ.get('DJANGO_SQL_PORT'),
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
]

# Allow easy passwords in debug environment
if os.environ.get('DJANGO_DEBUG_OFF') is not None:
    AUTH_PASSWORD_VALIDATORS.append({'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',})
    AUTH_PASSWORD_VALIDATORS.append({'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',})
    AUTH_PASSWORD_VALIDATORS.append({'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',})
    AUTH_PASSWORD_VALIDATORS.append({'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',})


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default charfield length
CHARFIELD_LENGTH = 60
CHARFIELD_MID_LENGTH = 300
CHARFIELD_LONG_LENGTH = 600

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.IsAdminUser',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer'
    ],
    'DEFAULT_SCHEMA_CLASS':'rest_framework.schemas.openapi.AutoSchema',
}

# In debug mode, allow the browsable html api view
if os.environ.get('DJANGO_DEBUG_OFF') is None:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append('rest_framework.renderers.BrowsableAPIRenderer')


ALLOWED_HOSTS = ["127.0.0.1", "localhost", "backend.anmeldung-test.farbenmeehr2020.de", "backend.anmeldung.farbenmeehr2020.de"]
if os.environ.get('DJANGO_DEBUG_OFF') is None:
    CSRF_TRUSTED_ORIGINS = [
        "127.0.0.1",
        "localhost",
    ]

    CORS_ORIGIN_WHITELIST = (
        'http://localhost:80',
        'http://127.0.0.1:80',
        'http://localhost:3000',
        'http://localhost:3001',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:3001',

        'https://localhost:80',
        'https://127.0.0.1:80',
        'https://localhost:3000',
        'https://localhost:3001',
        'https://127.0.0.1:3000',
        'https://127.0.0.1:3001',
    )
    CORS_EXPOSE_HEADERS = (
        'content-range',
    )
    CORS_ALLOW_CREDENTIALS = True
    CORS_ORIGIN_ALLOW_ALL = True

    SESSION_COOKIE_SAMESITE = False

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(minutes=1),
}

EMAILVERIFICATION_BASEURL = "http://localhost:8000/api/v1/user/verify"
if os.environ.get('EMAILVERIFICATION_BASEURL') is not None:
    EMAILVERIFICATION_BASEURL = os.environ.get('EMAILVERIFICATION_BASEURL')